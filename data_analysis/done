    further.major_relative_report(data, CONFIG.REPORT_FOLDER + '专业相关度.xlsx')

    further.major_quality_report(data, CONFIG.REPORT_FOLDER + '专业素质.xlsx')


    # 特殊人群
    further.special_gender_report(data, CONFIG.REPORT_FOLDER + '不同性别.xlsx')
    further.special_education_report(data, CONFIG.REPORT_FOLDER + '教育行业和非教育行业.xlsx')
    further.special_origin_province_report(data, CONFIG.REPORT_FOLDER + '省内省外生源.xlsx')
    further.special_indurstry_province_report(data, CONFIG.REPORT_FOLDER + '省内省外就业.xlsx')
    further.special_national_report(data, CONFIG.REPORT_FOLDER + '汉族少数名族.xlsx')

    # == == =已完成行转列
    # 就业率和就业状态
    further.work_option_report(data, CONFIG.REPORT_FOLDER + '就业机会.xlsx')
    further.non_employee_report(data, CONFIG.REPORT_FOLDER + '未就业分析.xlsx')
    further.employee_report(data, CONFIG.REPORT_FOLDER + '就业率及就业就业状态.xlsx')

    # 就业竞争力
    further.major_relative_report(data, CONFIG.REPORT_FOLDER + '专业相关度.xlsx')
    further.job_meet_report(data, CONFIG.REPORT_FOLDER + '职业期待吻合度.xlsx')

    # 完成部分行专列
    # further.job_satisfy_report(data, CONFIG.REPORT_FOLDER + '职业满意度.xlsx')
    further.work_stability_report(data, CONFIG.REPORT_FOLDER + '工作稳定性.xlsx')

    further.income_report(data, CONFIG.REPORT_FOLDER + '月均收入.xlsx')

    # 就业分布  行业和职业可以共用一套模板 **关于月均收入、满意度、相关度可以抽取
    further.employee_indurstry(data, CONFIG.REPORT_FOLDER + '就业行业分布.xlsx')
    further.employee_job(data, CONFIG.REPORT_FOLDER + '就业职业分布.xlsx')
    further.employee_industry_type(data, CONFIG.REPORT_FOLDER + '就业单位分布.xlsx')
    further.employee_industry_size(data, CONFIG.REPORT_FOLDER + '就业单位分布.xlsx')
    further.employee_region_report(data, CONFIG.REPORT_FOLDER + '就业地区分布.xlsx')

    # 求职过程与就业指导服务
    further.employee_difficult_report(data, CONFIG.REPORT_FOLDER + '求职过程.xlsx')

    # 母校综合评价
    further.school_satisfy_report(data, CONFIG.REPORT_FOLDER + '母校满意度.xlsx')
    further.school_recommed_report(data, CONFIG.REPORT_FOLDER + '母校推荐度.xlsx')

    # 学生指导与服务
    further.evelution_H4_Q_report(data, CONFIG.REPORT_FOLDER + '对生学生活服务的评价.xlsx')
    further.evelution_H4_P_report(data, CONFIG.REPORT_FOLDER + '对学生管理工作的评价.xlsx')
    further.evelution_H4_F_K_report(data, CONFIG.REPORT_FOLDER + '对就业教育服务的评价.xlsx')
    further.evelution_H4_L_O_report(data, CONFIG.REPORT_FOLDER + '对创业教育服务的反馈.xlsx')

    # 附加题
    further.evelution_H4_R_report(data, CONFIG.REPORT_FOLDER + '社团活动.xlsx')
    further.evelution_academic_report(data, CONFIG.REPORT_FOLDER + '母校学风认可度.xlsx')
    further.evelution_H4_T_report(data, CONFIG.REPORT_FOLDER + '教育教学总体评价.xlsx')
    further.evelution_H4_S_report(data, CONFIG.REPORT_FOLDER + '实践教学的评价.xlsx')
    further.evelution_H4_E_report(data, CONFIG.REPORT_FOLDER + '任课教师.xlsx')

    #国内升学
    further.further_report(data, CONFIG.REPORT_FOLDER + '国内升学.xlsx')

    # 出国境留学
    further.study_abroad_report(data, CONFIG.REPORT_FOLDER + '出国境留学.xlsx')
    # 自主创业
    further.self_employed_report(data, CONFIG.REPORT_FOLDER + '自主创业.xlsx')
    # 人才培养
    further.evelution_practice_report(data, CONFIG.REPORT_FOLDER + '对实践教学的评价.xlsx')
    further.evelution_lesson_report(data, CONFIG.REPORT_FOLDER + '对课堂教学的评价.xlsx')
    further.evelution_teach_report(data, CONFIG.REPORT_FOLDER + '对任课教师的评价.xlsx')

        demension = 'B5-B'

    df_indurstry = formulas.answer_rate_condition(data, demension, dict_where, ['比例'], [0], 5)
    df_indurstry.loc[:,col_name]=dict_where.get(CONFIG.DICT_KEY[1])
    df_indurstry = df_indurstry.groupby(col_name, as_index=False).head(5)
    df_combine = formulas.single_row_combine(df_indurstry,col_name, combin_name='行业')

    # 单位类型
    demension = 'B1'
    df_male_indurstry_type = formulas.answer_rate_condition(data, demension, dict_where, ['比例'], [0], 5)
    df_indurstry.loc[:, col_name] = dict_where.get(CONFIG.DICT_KEY[1])
    df_indurstry = df_indurstry.groupby(col_name, as_index=False).head(5)
    df_combine = formulas.single_row_combine(df_indurstry, col_name, combin_name='行业')
    # 就业省
    demension = 'B3-A'
    df_male_region = formulas.answer_rate_condition(data, demension, dict_where, ['比例'], [0], 5)

    # 就业职业
    demension = 'B4-B'
    df_male_job = formulas.answer_rate_condition(data, demension, dict_where, ['比例'], [0], 5)

    df_concat = pd.concat([df_male_indurstry, df_male_indurstry_type,
                           df_male_region, df_male_job], axis=1)
    dict_where1 = {CONFIG.DICT_KEY[0]: subject, CONFIG.DICT_KEY[1]: CONFIG.GENDER[0]}
    dict_where2 = {CONFIG.DICT_KEY[0]: subject, CONFIG.DICT_KEY[1]: CONFIG.GENDER[1]}

    df_emp_feature1 = special_employee_featured(data, dict_where1)
    df_emp_feature1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_emp_feature2 = special_employee_featured(data, dict_where2)
    df_emp_feature2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_emp_feature = special_employee_featured(data)
    df_emp_feature['条件'] = CONFIG.TOTAL_COLUMN

    df_concat = pd.concat([df_emp_feature1, df_emp_feature2, df_emp_feature])
    excelUtil.writeExcel(df_concat, filePath, suffix + '就业特色')

    df_emp_competitive1 = special_employee_competitive(data, dict_where1)
    df_emp_competitive1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_emp_competitive2 = special_employee_competitive(data, dict_where2)
    df_emp_competitive2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_emp_competitive = special_employee_competitive(data)
    df_emp_competitive['条件'] = CONFIG.TOTAL_COLUMN

    df_concat = pd.concat([df_emp_competitive1, df_emp_competitive2, df_emp_competitive])
    excelUtil.writeExcel(df_concat, filePath, suffix + '就业竞争力')

    df_lesson1 = special_lesson(data, dict_where1)
    df_lesson1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_lesson2 = special_lesson(data, dict_where2)
    df_lesson2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_lesson = special_lesson(data)
    df_lesson['条件'] = CONFIG.TOTAL_COLUMN
    df_concat = pd.concat([df_lesson1, df_lesson2, df_lesson])
    excelUtil.writeExcel(df_concat, filePath, suffix + '就业课堂教学')

    df_practice1 = special_practice(data, dict_where1)
    df_practice1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_practice2 = special_practice(data, dict_where2)
    df_practice2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_practice = special_practice(data)
    df_practice['条件'] = CONFIG.TOTAL_COLUMN
    df_concat = pd.concat([df_practice1, df_practice2, df_practice])
    excelUtil.writeExcel(df_concat, filePath, suffix + '实践教学')

    df_teacher1 = special_teacher(data, dict_where1)
    df_teacher1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_teacher2 = special_teacher(data, dict_where2)
    df_teacher2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_teacher = special_teacher(data)
    df_teacher['条件'] = CONFIG.TOTAL_COLUMN
    df_concat = pd.concat([df_teacher1, df_teacher2, df_teacher])
    excelUtil.writeExcel(df_concat, filePath, suffix + '教师评价')

    df_school1 = special_school(data, dict_where1)
    df_school1['条件'] = dict_where1[CONFIG.DICT_KEY[1]]
    df_school2 = special_school(data, dict_where2)
    df_school2['条件'] = dict_where2[CONFIG.DICT_KEY[1]]
    df_school = special_school(data)
    df_school['条件'] = CONFIG.TOTAL_COLUMN
    df_concat = pd.concat([df_school1, df_school2, df_school])
    excelUtil.writeExcel(df_concat, filePath, suffix + '母校总和评价')

    return


# 被formulas answer_rate替代
def answer_value_rate(data, subject, eliminate_unknown=[]):
    '''各答案占比'''
    count = Util.answer_count(data, subject);
    pd_value_count = Util.answer_val_count(data, subject)
    pd_result = pd.DataFrame({'答案': pd_value_count.index,
                              '回答此答案人数': pd_value_count.values})

    if not eliminate_unknown:
        # 为空无需剔除
        pd_result['答题总人数'] = count
    else:
        unknown_num = Util.answer_of_subject_count(data, subject, eliminate_unknown[0])
        pd_result['答题总人数'] = count - unknown_num
    pd_result['比例'] = (pd_result['回答此答案人数'] / pd_result['答题总人数'] * 100).round(decimals=2)

    return pd_result
